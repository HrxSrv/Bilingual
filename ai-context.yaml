import os
import sys
import argparse
from pathlib import Path
from difflib import unified_diff
import re

script_dir = os.path.dirname(__file__)
src_dir = os.path.abspath(os.path.join(script_dir, '..', '..', 'src'))
sys.path.insert(0, src_dir)

from utils.translation import translate_text

TARGET_LANGUAGES = ["en", "ja"]

def detect_source_language(text):
    # Unicode ranges for Japanese characters
    HIRAGANA = '\u3040-\u309F'
    KATAKANA = '\u30A0-\u30FF'
    KANJI = '\u4E00-\u9FFF'
    HALF_WIDTH_KATAKANA = '\uFF60-\uFF9F'
    
    # Check if text contains any Japanese character
    jp_pattern = f'[{HIRAGANA}{KATAKANA}{KANJI}{HALF_WIDTH_KATAKANA}]'
    has_japanese = bool(re.search(jp_pattern, text))
    
    # If any Japanese character is found, original is Japanese, translate to English
    # Otherwise, original is English, translate to Japanese
    return "ja" if has_japanese else "en"

def read_file(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            return file.read()
    except UnicodeDecodeError:
        with open(file_path, "r", encoding="utf-8-sig") as file:
            return file.read()

def get_translated_path(original_path, lang):
    path = Path(original_path)
    if path.name == "README.md":
        return path.parent / f"README.{lang}.md"
    else:
        # Replace 'docs' with 'docs.{lang}' in the path
        parts = path.parts
        try:
            idx = parts.index('docs')
            new_parts = list(parts)
            new_parts[idx] = f'docs.{lang}'
            return Path(*new_parts)
        except ValueError:
            # If 'docs' not in path, just prepend 'docs.{lang}'
            return Path(f'docs.{lang}') / path

def sync_translations(original_file):
    content = read_file(original_file)
    source_lang = detect_source_language(content)
    
    # Only translate if source language is different from target languages
    target_langs = [lang for lang in TARGET_LANGUAGES if lang != source_lang]
    
    if not target_langs:
        print(f"File {original_file} is already in target language(s), skipping translation")
        return
    
    for lang in target_langs:
        translated_file = get_translated_path(original_file, lang)
        translated_file.parent.mkdir(parents=True, exist_ok=True)
        needs_translation = True
        
        if translated_file.exists():
            existing_translation = read_file(translated_file)
            diff = list(unified_diff(
                existing_translation.splitlines(),
                content.splitlines(),
                lineterm=""
            ))
            needs_translation = bool(diff)
            
        if needs_translation:
            print(f"Translating {original_file} from {source_lang} to {lang}")
            translated_content = translate_text(content, lang)
            if translated_content:
                translated_file.write_text(translated_content, encoding='utf-8')

def find_markdown_files():
    markdown_files = []
    
    # Add README.md if it exists
    if os.path.exists('README.md'):
        markdown_files.append('README.md')
    
    # Add all .md files from docs directory
    if os.path.exists('docs'):
        for root, _, files in os.walk('docs'):
            for file in files:
                if file.endswith('.md'):
                    markdown_files.append(os.path.join(root, file))
    
    return markdown_files

def process_specific_files(file_list):
    if not file_list:
        return
    
    files = file_list.split(',')
    for file in files:
        file = file.strip()
        if file.endswith('.md'):
            if os.path.exists(file):
                print(f"Processing specific file: {file}")
                sync_translations(file)
            else:
                print(f"File not found: {file}")

def delete_translated_files(deleted_files):
    if not deleted_files:
        return
    files = deleted_files.split(',')
    for file in files:
        file = file.strip()
        if not file.endswith('.md'):
            continue
        for lang in TARGET_LANGUAGES:
            translated_path = get_translated_path(file, lang)
            if translated_path.exists():
                print(f"Deleting translated file: {translated_path}")
                os.remove(translated_path)

def main():
    parser = argparse.ArgumentParser(description='Translate markdown files')
    parser.add_argument('--initial-setup', action='store_true', help='Perform initial setup translation')
    parser.add_argument('--files', type=str, help='Comma-separated list of files to translate')
    parser.add_argument('--deleted-files', type=str, help='Comma-separated list of deleted files')
    args = parser.parse_args()

    if args.deleted_files:
        print(f"Deleting translated files for: {args.deleted_files}")
        delete_translated_files(args.deleted_files)

    if args.initial_setup:
        print("Performing initial setup translation")
        markdown_files = find_markdown_files()
        if not markdown_files:
            print("No markdown files found to translate")
            return
        print(f"Found {len(markdown_files)} markdown files to process")
        for file in markdown_files:
            sync_translations(file)
    elif args.files:
        print(f"Processing specific files: {args.files}")
        process_specific_files(args.files)
    else:
        markdown_files = find_markdown_files()
        if not markdown_files:
            print("No markdown files found to translate")
            return
        print(f"Found {len(markdown_files)} markdown files to process")
        for file in markdown_files:
            sync_translations(file)

if __name__ == "__main__":

    main()


name: Translate Markdown Files

on:
  workflow_call:
    secrets:
      OPENAI_API_KEY:
        required: true
    inputs:
      is_initial_setup:
        required: false
        type: boolean
        default: false
        description: 'Whether this is the initial setup run'
      changed_files:
        required: false
        type: string
        default: ''
        description: 'Comma-separated list of changed files'
      deleted_files:
        required: false
        type: string
        default: ''
        description: 'Comma-separated list of deleted files'
permissions:
      contents: write
jobs:
  translate-markdown:
    runs-on: ubuntu-latest
    

    steps:
      - name: Checkout Translation Tools Repository
        uses: actions/checkout@v3
        with:
          repository: hrxsrv/bilingual-github
          path: bilingual-github

      - name: Checkout Target Repository
        uses: actions/checkout@v3
        with:
          path: target-repo
          fetch-depth: 0  # Fetch all history for better diff detection

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Translation Dependencies
        working-directory: bilingual-github
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure Git User
        working-directory: target-repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Generate Markdown Translations
        working-directory: target-repo
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          IS_INITIAL_SETUP: ${{ inputs.is_initial_setup }}
          CHANGED_FILES: ${{ inputs.changed_files }}
          DELETED_FILES: ${{ inputs.deleted_files }}
        run: |
          echo "Debug: OPENAI_API_KEY is set: $([ -n "$OPENAI_API_KEY" ] && echo "yes" || echo "no")"
          
          if [ "$IS_INITIAL_SETUP" = "true" ]; then
            echo "Performing initial setup translation"
            OPENAI_API_KEY="${OPENAI_API_KEY}" python ../bilingual-github/src/hooks/post_commit.py --initial-setup
          elif [ -n "$CHANGED_FILES" ] || [ -n "$DELETED_FILES" ]; then
            echo "Translating changed files: $CHANGED_FILES"
            echo "Deleting translated files for: $DELETED_FILES"
            OPENAI_API_KEY="${OPENAI_API_KEY}" python ../bilingual-github/src/hooks/post_commit.py --files "$CHANGED_FILES" --deleted-files "$DELETED_FILES"
          else
            echo "Translating all markdown files"
            OPENAI_API_KEY="${OPENAI_API_KEY}" python ../bilingual-github/src/hooks/post_commit.py
          fi

      - name: Commit and Push Translations
        working-directory: target-repo
        run: |
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update markdown translations"
            git push
          fi

name: Trigger Markdown Translation

on:
  push:
    branches:
      - main
      - master  
    paths:
      - '**.md'
      - 'docs/**'
      - 'README.md'
      - '.github/workflows/trigger-translation.yml'
permissions:
  contents: write 
  
jobs:
  debug-info:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Information
        run: |
          echo "Event Name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Before: ${{ github.event.before }}"
          echo "After: ${{ github.event.after }}"
          echo "Modified Files: ${{ github.event.head_commit.modified }}"
          echo "Added Files: ${{ github.event.head_commit.added }}"
          echo "Removed Files: ${{ github.event.head_commit.removed }}"

  check-markdown-changes:
    needs: debug-info
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
      is_initial_setup: ${{ steps.check.outputs.is_initial_setup }}
      deleted_files: ${{ steps.check.outputs.deleted_files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  

      - name: Check for changes
        id: check
        run: |
          # Check if this is the first commit with the workflow file
          if [[ "${{ github.event_name }}" == "push" && "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
            echo "is_initial_setup=true" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "deleted_files=" >> $GITHUB_OUTPUT
            exit 0
          else
            # Check for modified or added markdown files
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
            echo "Changed files: $CHANGED_FILES"
            MD_FILES=$(echo "$CHANGED_FILES" | grep -E '\.md$|^docs/' || true)
            echo "Markdown files: $MD_FILES"
            # Check for deleted markdown files
            DELETED_FILES=$(git diff --name-only --diff-filter=D ${{ github.event.before }} ${{ github.event.after }} | grep -E '\.md$|^docs/' || true)
            echo "Deleted files: $DELETED_FILES"
            if [[ -n "$MD_FILES" ]]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
            echo "deleted_files=$DELETED_FILES" >> $GITHUB_OUTPUT
            echo "is_initial_setup=false" >> $GITHUB_OUTPUT
            exit 0
          fi

  trigger-markdown-translation:
    needs: check-markdown-changes
    if: needs.check-markdown-changes.outputs.has_changes == 'true' || needs.check-markdown-changes.outputs.is_initial_setup == 'true'
    uses: hrxsrv/bilingual-github/.github/workflows/translate-markdown.yml@main
    secrets:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    with:
      is_initial_setup: ${{ needs.check-markdown-changes.outputs.is_initial_setup == 'true' }}
      changed_files: ${{ github.event.head_commit.modified }}
      deleted_files: ${{ needs.check-markdown-changes.outputs.deleted_files }} 